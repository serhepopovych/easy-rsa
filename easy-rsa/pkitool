#!/bin/sh

#  OpenVPN -- An application to securely tunnel IP networks
#             over a single TCP/UDP port, with support for SSL/TLS-based
#             session authentication and key exchange,
#             packet encryption, packet authentication, and
#             packet compression.
#
#  Copyright (C) 2002-2010 OpenVPN Technologies, Inc. <sales@openvpn.net>
#  Copyright (C) 2018-2020 Serhey Popovych <serhe.popovych@gmail.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2
#  as published by the Free Software Foundation.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program (see the file COPYING included with this
#  distribution); if not, write to the Free Software Foundation, Inc.,
#  59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# pkitool is a front-end for the openssl tool.

# Calling scripts can also set the KEY_NAME environmental
# variable to set the "name" X509 subject field.

# Adjust umask to unset group and others write bit
umask $(printf -- '%04o\n' $(($(umask) | 0022)))

PROGNAME='pkitool'
VERSION=2.0
DEBUG=0

if [ -n "${EASY_RSA-}" ]; then
    . "$EASY_RSA/lib/libopenssl.sh"
    . "$EASY_RSA/lib/libpwquality.sh"
else
    # Usage: ossl_cert_read_date2ts <crt_file> -(start|end)
    ossl_cert_read_date2ts()
    {
        local func="${FUNCNAME:-ossl_cert_read_date2ts}"

        local crt="${1:?missing 1st arg to ${func}() <crt_file>}"
        local arg="${2:?missing 2d arg to ${func}() -(start|end)}"

        case "$arg" in
            -start) ;; # notBefore
            -end)   ;; # notAfter
            *) echo >&2 "invalid $arg to ${func}"; return 1 ;;
        esac
        arg="${arg}date"

        local ts

        eval "$(
            ${OPENSSL:-openssl} x509 -in "$crt" $arg \
                -noout \
                -nameopt oneline,-space_eq,sep_comma_plus,use_quote | \
            sed -n -e "s/^not\(Before\|After\)\s*=\s*\(.\+\)\s*$/ts='\2'/p"
        )"

        [ -n "$ts" ] || return

        date --date="$ts" '+%s'
    }

    # Usage: ossl_cert_expires_in_days <notAfter>
    ossl_cert_expires_in_days()
    {
        local func="${FUNCNAME:-ossl_cert_expires_in_days}"

        local notAfter="${1:?missing 1st arg to ${func}() <notAfter>}"
        notAfter="$(date --date="@${notAfter}" '+%s' 2>/dev/null)" ||
        notAfter="$(date --date="${notAfter}"  '+%s' 2>/dev/null)" ||
        notAfter="$(ossl_date2ts "${notAfter}")" || return

        local now=$(date '+%s')

        local days=$((notAfter - now))
        if [ "$days" -ge 0 ] 2>/dev/null; then
            echo "$((days / 60 / 60 / 24))"
        else
            echo '-1'
        fi
    }

    # Usage: pw_make [<length>]
    pw_make()
    {
        tr -dc '[:graph:]' </dev/urandom | \
        tr -d '[\"'\''\\&|]' | head -c "${1:-64}"
        echo
    }
fi # [ -n "${EASY_RSA-}" ]

die()
{
    local m="$1"

    echo "$m" >&2
    exit 1
}

need_vars()
{
    echo '  Please edit the vars script to reflect your configuration,'
    echo '  then source it with "source ./vars".'
    echo '  Next, to start with a fresh PKI configuration and to delete any'
    echo '  previous certificates and keys, run "./clean-all".'
    echo "  Finally, you can run this tool ($PROGNAME) to build certificates/keys."
    return 1
}

usage()
{
    echo "$PROGNAME $VERSION"
    echo "Usage: $PROGNAME [options...] [common-name|file-name]"
    echo "Options:"
    echo "  --batch    : batch mode (default)"
    echo "  --keysize  : Set keysize"
    echo "      size   : size (default=2048)"
    echo "  --interact : interactive mode"
    echo "  --server   : build server cert"
    echo "  --client   : build client cert (default)"
    echo "  --initca   : build root CA"
    echo "  --inter    : build intermediate CA"
    echo "  --pass     : encrypt private key with password from KEY_PASSPHRASE"
    echo "  --csr      : only generate a CSR, do not sign"
    echo "  --sign     : sign an existing CSR"
    echo "  --pkcs12   : generate a combined PKCS#12 file"
    echo "  --pkcs11   : generate certificate on PKCS#11 token"
    echo "      lib    : PKCS#11 library"
    echo "      slot   : PKCS#11 slot"
    echo "      id     : PKCS#11 object id (hex string)"
    echo "      label  : PKCS#11 object label"
    echo "Standalone options:"
    echo "  --pkcs11-slots   : list PKCS#11 slots"
    echo "      lib    : PKCS#11 library"
    echo "  --pkcs11-objects : list PKCS#11 token objects"
    echo "      lib    : PKCS#11 library"
    echo "      slot   : PKCS#11 slot"
    echo "  --pkcs11-init    : initialize PKCS#11 token DANGEROUS!!!"
    echo "      lib    : PKCS#11 library"
    echo "      slot   : PKCS#11 slot"
    echo "      label  : PKCS#11 token label"
    echo
    echo "Notes:"
    need_vars ||:
    echo
    echo "  In order to use PKCS#11 interface you must have opensc-0.10.0 or higher."
    echo
    echo "Generated files:"
    echo '(Files will be placed in the $KEY_DIR directory, defined in ./vars)'
    echo "  ca.crt      -> root certificate (--ca)"
    echo "  ca.key      -> root key, keep secure (not directly used)"
    echo "   {common-name|file-name}/"
    echo "     cert.pem     -> client/server certificate (--cert)"
    echo "     privkey.pem  -> private key, keep secure (--key)"
    echo "     cert.csr     -> certificate signing request (not directly used)"
    echo "     {common-name|file-name}.p12"
    echo "                  -> PKCS#12 file with cert, privkey and ca.crt"
    echo "  dh2048.pem  -> Diffie Hellman parameters (--dh)"
    echo
    echo "Examples:"
    echo "  $PROGNAME --initca          -> Build root certificate"
    echo "  $PROGNAME --initca --pass   -> Build root certificate with password-protected key"
    echo "  $PROGNAME --server server1  -> Build \"server1\" certificate/key"
    echo "  $PROGNAME client1           -> Build \"client1\" certificate/key"
    echo "  $PROGNAME --client client1  -> Build \"client1\" certificate/key"
    echo "  $PROGNAME --pass client2    -> Build password-protected \"client2\" certificate/key"
    echo "  $PROGNAME --pkcs12 client3  -> Build \"client3\" certificate/key in PKCS#12 format"
    echo "  $PROGNAME --csr client4     -> Build \"client4\" CSR to be signed by another CA"
    echo "  $PROGNAME --sign client4    -> Sign \"client4\" CSR"
    echo "  $PROGNAME --inter interca   -> Build an intermediate key-signing certificate/key"
    echo "                               Also see ./inherit-inter script."
    echo "  $PROGNAME --pkcs11 /usr/lib/pkcs11/lib1 0 010203 \"client5 id\" client5"
    echo "                              -> Build \"client5\" certificate/key in PKCS#11 token"
    echo
    echo "Typical usage for initial PKI setup.  Build myserver, client1, and client2 cert/keys."
    echo "Protect client2 key with a password.  Build DH parms.  Generated files in ./keys :"
    echo "  [edit vars with your site-specific info]"
    echo "  source ./vars"
    echo "  ./clean-all"
    echo "  ./build-dh     -> takes a long time, consider backgrounding"
    echo "  ./$PROGNAME --initca"
    echo "  ./$PROGNAME --server myserver"
    echo "  ./$PROGNAME --client client1"
    echo "  ./$PROGNAME --pass client2"
    echo
    echo "Typical usage for adding client cert to existing PKI:"
    echo "  source ./vars"
    echo "  ./$PROGNAME client-new"
}

# Make sure ./vars was sourced beforehand
[ -n "$KEY_DIR" -a -n "$KEY_CONFIG" ] || need_vars || exit

# Make sure $KEY_CONFIG points to the correct version of openssl.cnf
if ! grep -i 'easy-rsa version 2\.[0-9]' "$KEY_CONFIG" >/dev/null 2>&1; then
    echo "$PROGNAME: KEY_CONFIG (set by the ./vars script) is pointing to the wrong"
    echo "version of openssl.cnf: $KEY_CONFIG."
    echo 'The correct version should have a comment that says: easy-rsa version 2.x'
    exit 1
fi

# Set tool defaults
[ -n "$OPENSSL" ] || export OPENSSL='openssl'
[ -n "$PKCS11TOOL" ] || export PKCS11TOOL='pkcs11-tool'

# Set defaults
DO_ROOT='0'
DO_REQ=''
REQ_EXT=''
DO_CRT=''
CA_EXT=''
CA='ca'
DO_P12=''
DO_P11=''
# must be set or errors of openssl.cnf
PKCS11_MODULE_PATH='dummy'
PKCS11_PIN='dummy'
PASS_OPT=''
BATCH='-batch'

# Process options
while [ $# -gt 0 ]; do
    case "$1" in
        --initca)
            if [ $DO_ROOT -eq 0 ]; then
                DO_ROOT='1'
                DO_REQ="${DO_REQ:-0}"
                DO_CRT="${DO_CRT:-0}"
                DO_P12="${DO_P12:-0}"
                DO_P11="${DO_P11:-0}"
            fi
            ;;

            # Do not stack extensions so that intermediate CA
            # does not have server extensions and key usage.
        --server)
            REQ_EXT='-extensions server'
            CA_EXT='-extensions server'
            ;;
        --client)
            REQ_EXT=''
            CA_EXT=''
            ;;
        --inter)
            REQ_EXT=''
            CA_EXT='-extensions v3_ca'
            ;;

        --csr)
            DO_REQ='1'
            DO_CRT='0'
            ;;
        --sign)
            DO_REQ='2'
            DO_CRT='1'
            ;;

        --keysize)
            KEY_SIZE=$2
            shift
            ;;

        --md)
            KEY_MD="$2"
            shift
            ;;

        --batch)
            BATCH='-batch'
            ;;
        --interact)
            BATCH=''
            ;;

        --pass)
            PASS_OPT='1'
            ;;

        --pkcs12)
            DO_REQ='2'
            DO_CRT='2'
            DO_P12='1'
            ;;
        --pkcs11)
            DO_REQ='2'
            DO_CRT='2'
            DO_P11='1'
            PKCS11_MODULE_PATH="$2"
            PKCS11_SLOT="$3"
            PKCS11_ID="$4"
            PKCS11_LABEL="$5"
            shift 4
            ;;

        # standalone
        --pkcs11-init)
            PKCS11_MODULE_PATH="$2"
            PKCS11_SLOT="$3"
            PKCS11_LABEL="$4"
            [ -n "$PKCS11_LABEL" ] ||
                die 'Please specify library name, slot and label'
            $PKCS11TOOL \
                --module "$PKCS11_MODULE_PATH" \
                --init-token \
                --slot "$PKCS11_SLOT" \
                --label "$PKCS11_LABEL" &&
            $PKCS11TOOL \
                --module "$PKCS11_MODULE_PATH" \
                --init-pin \
                --slot "$PKCS11_SLOT" \
                #
            exit $?
            ;;
        --pkcs11-slots)
            PKCS11_MODULE_PATH="$2"
            [ -n "$PKCS11_MODULE_PATH" ] ||
                die 'Please specify library name'
            $PKCS11TOOL \
                --module "$PKCS11_MODULE_PATH" \
                --list-slots \
                #
            exit 0
            ;;
        --pkcs11-objects)
            PKCS11_MODULE_PATH="$2"
            PKCS11_SLOT="$3"
            [ -n "$PKCS11_SLOT" ] ||
                die 'Please specify library name and slot'
            $PKCS11TOOL \
                --module "$PKCS11_MODULE_PATH" \
                --list-objects \
                --login \
                --slot "$PKCS11_SLOT" \
                #
            exit 0
            ;;

        --help|--usage)
            usage
            exit
            ;;
        --version)
            echo "$PROGNAME $VERSION"
            exit
            ;;

        # errors
        --*)
            die "$PROGNAME: unknown option: $1"
            ;;
        *)
            break
            ;;
    esac
    shift
done

if [ -n "$BATCH" ]; then
    if $OPENSSL version | grep '0\.9\.6' >/dev/null 2>&1; then
        die 'Batch mode is unsupported in openssl<0.9.7'
    fi
fi

if [ $DO_ROOT -eq 1 ]; then
    if [ $DO_REQ -gt 0 -o $DO_CRT -gt 0 -o $DO_P12 -gt 0 -o $DO_P11 -gt 0 ]; then
        die '--initca and --csr and/or --sign and/or --pkcs11 and/or --pkcs12 cannot be specified together'
    fi
else
    DO_REQ="${DO_REQ:-1}"
    DO_CRT="${DO_CRT:-1}"
    DO_P12="${DO_P12:-0}"
    DO_P11="${DO_P11:-0}"
fi

if [ $DO_P11 -eq 1 ]; then
    if [ $DO_P12 -eq 1 ]; then
        die 'PKCS#11 and PKCS#12 cannot be specified together'
    fi
    if ! grep '^pkcs11.*=' "$KEY_CONFIG" >/dev/null 2>&1; then
        die "Please edit $KEY_CONFIG and setup PKCS#11 engine"
    fi
    if [ -z "$PKCS11_LABEL" ]; then
        die 'PKCS#11 arguments incomplete'
    fi
fi

# Use KEY_DIR
if ! cd "$KEY_DIR"; then
    die "Cannot change directory to $KEY_DIR"
fi

# Set KEY_CN, FN
if [ $# -gt 1 ]; then
    usage
    exit 1
fi

if [ -z "$KEY_CN" ]; then
    if [ -n "$1" ]; then
        KEY_CN="$1"
    elif [ $DO_ROOT -eq 1 ]; then
        KEY_CN="${KEY_ORG:+$KEY_ORG }CA"
    else
        usage
        exit 1
    fi
fi
if [ -n "$BATCH" ]; then
    echo "Using Common Name: $KEY_CN"
fi

if [ -n "$1" ]; then
    FN="$1"
else
    FN="$KEY_CN"
fi

# Use password to protect private key
if [ -n "$PASS_OPT" ]; then
    if [ $DO_ROOT -eq 1 ]; then
        KEY_PASSPHRASE="${CA_PASSPHRASE-}"
    else
        [ -n "$KEY_PASSPHRASE" ] ||
            KEY_PASSPHRASE="$(cat "$FN/privkey.passphrase" 2>/dev/null ||:)"
        [ -n "$KEY_PASSPHRASE" ] ||
            KEY_PASSPHRASE="$(pw_make 16)"
    fi

    [ -n "$KEY_PASSPHRASE" ] ||
        die 'Missing non-empty KEY_PASSPHRASE'
    REQ_NODES=''
else
    KEY_PASSPHRASE=''
    REQ_NODES='-nodes'
fi

# If undefined, set default key expiration intervals
if [ "$CA_EXPIRE" -lt 1 ] 2>/dev/null; then
    CA_EXPIRE=3650
fi
if [ "$KEY_EXPIRE" -lt 1 ] 2>/dev/null; then
    KEY_EXPIRE=365
fi

# Set X509 Name string to filename
if [ -z "$KEY_NAME" ]; then
    KEY_NAME="$(echo "$FN" | tr -d ' ')"
fi

# Set default private key size
if [ "$KEY_SIZE" -lt 2048 ] 2>/dev/null; then
    KEY_SIZE=2048
fi

# Set default message digest algo
if [ -z "$KEY_MD" ]; then
    KEY_MD='sha256'
fi

# Sanitize parameters
if [ $DO_ROOT -eq 1 ]; then
    FN="$CA"
    DO_REQ='0'
    REQ_EXT=''
    DO_CRT='0'
    CA_EXT=''
    DO_P12='0'
    DO_P11='0'
    KEY_SAN=''
else
    # Handle subjectAltName (SAN) from KEY_SAN variable
    if [ -n "$REQ_EXT" ]; then
        # server
        KS1="DNS:$KEY_CN"
    else
        if [ -n "$CA_EXT" ]; then
            # v3_ca (does not have ones?)
            KS1=''
            KEY_SAN=''
        else
            # client
            KS1='email:copy'
        fi
    fi
    if [ -n "$KEY_SAN" ]; then
        KS2=",$KEY_SAN,"
        if [ -n "${KS2##*,$KS1,*}" ]; then
            KEY_SAN="$KS1,$KEY_SAN"
        fi
    else
        KEY_SAN="$KS1"
    fi
    unset KS1 KS2
fi

export \
    CA_EXPIRE \
    KEY_EXPIRE \
    KEY_NAME \
    KEY_SIZE \
    KEY_MD \
    KEY_SAN \
    KEY_PASSPHRASE \
    PKCS11_MODULE_PATH \
    PKCS11_PIN \
    #

# Show parameters (debugging)
if [ $DEBUG -eq 1 ]; then
    echo "BATCH='$BATCH'"
    echo "DO_ROOT='$DO_ROOT'"
    echo "DO_REQ='$DO_REQ'"
    echo "REQ_EXT='$REQ_EXT'"
    echo "REQ_NODES='$REQ_NODES'"
    echo "DO_CRT='$DO_CRT'"
    echo "CA_EXT='$CA_EXT'"
    echo "CA='$CA'"
    echo "DO_P12='$DO_P12'"
    echo "DO_P11='$DO_P11'"
    echo "PKCS11_MODULE_PATH='$PKCS11_MODULE_PATH'"
    echo "PKCS11_SLOT='$PKCS11_SLOT'"
    echo "PKCS11_ID='$PKCS11_ID'"
    echo "PKCS11_LABEL='$PKCS11_LABEL'"
    echo "CA_EXPIRE='$CA_EXPIRE'"
    echo "KEY_EXPIRE='$KEY_EXPIRE'"
    echo "KEY_CN='$KEY_CN'"
    echo "KEY_OU='$KEY_OU'"
    echo "KEY_NAME='$KEY_NAME'"
    echo "KEY_SIZE='$KEY_SIZE'"
    echo "KEY_MD='$KEY_MD'"
    echo "KEY_PASSPHRASE='$KEY_PASSPHRASE'"
fi

# Build root CA
if [ $DO_ROOT -eq 1 ]; then
    $OPENSSL req $BATCH -days $CA_EXPIRE -x509 \
        ${REQ_NODES:--passout env:KEY_PASSPHRASE} \
        -new -newkey rsa:$KEY_SIZE -keyout "$FN.key" \
        -out "$FN.crt" \
        -config "$KEY_CONFIG" &&
    chmod 0600 "$FN.key" || exit
else
    # Make sure CA key/cert is available
    if [ $DO_CRT -eq 1 -o $DO_P12 -eq 1 ]; then
        if ! [ -s "$CA.crt" -a -s "$CA.key" ]; then
            echo "$PROGNAME: Need a readable $CA.crt and $CA.key in $KEY_DIR"
            echo "Try $PROGNAME --initca to build a root certificate/key."
            exit 1
        fi
    fi

    # Will store files in subdirectory
    install -d "$FN/" || exit

    # Generate key for PKCS#11 token
    if [ $DO_P11 -eq 1 ]; then
        stty -echo
        echo -n 'User PIN: '
        read -r PKCS11_PIN
        stty echo
        export PKCS11_PIN

        echo 'Generating key pair on PKCS#11 token...'
        $PKCS11TOOL --module "$PKCS11_MODULE_PATH" \
            --keypairgen --key-type rsa:$KEY_SIZE \
            --login --pin "$PKCS11_PIN" \
            --slot "$PKCS11_SLOT" --id "$PKCS11_ID" \
            --label "$PKCS11_LABEL" || exit

        PKCS11_ARGS="-engine pkcs11 -keyform engine -key $PKCS11_SLOT:$PKCS11_ID"
    else
        PKCS11_ARGS=''
    fi

    # Build csr and pkey
    if [ $DO_REQ -gt 0 ]; then
        if [ $DO_REQ -gt 1 -a -s "$FN/cert.csr" ]; then
            DO_REQ=0
        else
            $OPENSSL req $BATCH $REQ_EXT \
                ${REQ_NODES:--passout env:KEY_PASSPHRASE} \
                -new -newkey rsa:$KEY_SIZE -keyout "$FN/privkey.pem" \
                -out "$FN/cert.csr" \
                -config "$KEY_CONFIG" \
                $PKCS11_ARGS &&
            chmod 0600 "$FN/privkey.pem" || exit

            DO_REQ=1
        fi
    fi

    # Build crt
    if [ $DO_CRT -gt 0 ]; then
        if [ $DO_CRT -gt 1 -a -s "$FN/cert.pem" ]; then
            DO_CRT=0
        else
            days="$(ossl_cert_read_date2ts "$CA.crt" -end)" &&
            days="$(ossl_cert_expires_in_days "$days")" || exit

            [ $days -le $KEY_EXPIRE ] || days=$KEY_EXPIRE

            $OPENSSL ca $BATCH $CA_EXT -days $days -notext \
                ${CA_PASSPHRASE:+-passin env:CA_PASSPHRASE} \
                -out "$FN/cert.pem" -in "$FN/cert.csr" \
                -config "$KEY_CONFIG" &&
            [ -s "$FN/cert.pem" ] || exit

            DO_CRT=1
        fi
    fi

    # Make pkcs12 bundle
    if [ $DO_P12 -gt 0 ]; then
        $OPENSSL pkcs12 -export -out "$FN/$FN.p12" \
            ${REQ_NODES:--passin env:KEY_PASSPHRASE -passout env:KEY_PASSPHRASE} \
            -certfile "$CA.crt" -inkey "$FN/privkey.pem" -in "$FN/cert.pem" \
            -keypbe 'aes-256-cbc' -certpbe 'aes-256-cbc' -macalg 'sha256' &&
        chmod 0600 "$FN/$FN.p12" || exit
    elif [ $DO_P11 -gt 0 ]; then
        # Load certificate into PKCS#11 token
        $OPENSSL x509 \
            -in "$FN/cert.pem" -inform PEM \
            -out "$FN/cert.der" -outform DER &&
        $PKCS11TOOL --module "$PKCS11_MODULE_PATH" \
            --write-object "$FN/cert.der" --type cert \
            --login --pin "$PKCS11_PIN" \
            --slot "$PKCS11_SLOT" --id "$PKCS11_ID" \
            --label "$PKCS11_LABEL" || exit
        rm -f "$FN/cert.der"
    fi
fi

# Point to the key/csr/crt to help caller find ones we managed
for f in "$FN/privkey.pem" "$FN/cert.csr" "$FN/cert.pem"; do
    if [ -f "$f" ]; then
        ln -sf "$f" "last-${f##*.}" || exit
    fi
done

if [ -n "$KEY_PASSPHRASE" ]; then
    if [ $DO_REQ -eq 1 -a -n "$KEY_SAN" ]; then
        # Store passphrase only for non-CA private keys
        f=$(umask)
        umask 0077
        echo "$KEY_PASSPHRASE" >"$FN/privkey.passphrase"
        umask $f
    fi
fi

# Report actions we performed to /dev/fd/3. This can be used for example
# by calling script to determine if new csr/pkey file created or
# existing csr is used to create (renew) certificate with behaviour
# activated using --sign parameter.
{
    echo >&3 "
        FN='$FN'
        DO_ROOT='$DO_ROOT'
        DO_REQ='$DO_REQ'
        DO_CRT='$DO_CRT'
        DO_P12='$DO_P12'
        DO_P11='$DO_P11'
    "
} >/dev/null 2>&1 ||:
