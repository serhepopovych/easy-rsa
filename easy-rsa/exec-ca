#!/bin/sh -ue

# Usage: exec-ca [NAME=VAL...] [options] [--] <ca> <command> [<args>...]

# Executing from initialized, possibly different, CA environment
[ -z "${KEY_DIR-}" ] || IN_EXEC_CA=''

if [ -z "${IN_EXEC_CA-}" ]; then
	# Usage: usage
	usage()
	{
		local rc=$?
		local fd

		[ $rc -eq 0 ] && fd=1 || fd=2

		cat >&$fd <<EOF
usage: $0 [NAME=VAL...] [options] [--] <ca> <command> [<args> ...]

  options : options for exec-ca

    --runas   run as specified user instead of current (i.e. \$USER)
    --help|--usage
              this help message
    --version this program version

  ca      : the CA directory (KEY_DIR) of the PKI to run command on
  command : command to run with PKI environment read from vars-<ca>
  args    : (optional) arguments to <command>

Example: $0 webCA build-ca (build webCA)
         $0 webCA (execute \$SHELL with environment from vars-webCA)
EOF
		return $rc
	}
	trap 'usage' EXIT

	env_vars=''

	# Add from command line
	while [ $# -gt 0 ]; do
		case "$1" in
			*=env:*)
				# Note that env(1) is not ready for this
				eval "env_vars=\"\${env_vars} '\$${1#*=env:}'\""
				;;
			*=*)
				env_vars="${env_vars} '$1'"
				;;
			--runas)
				shift && runas="$1"
				;;
			--help|--usage)
				exit
				;;
			--version)
				version=1
				break
				;;
			--)
				shift
				break
				;;
			# errors
			--*)
				printf -- '%s: unknown option: %s\n' "$0" "$1"
				trap - EXIT
				exit 1
				;;
			*)
				break
				;;
		esac
		shift
	done
	[ $# -gt 0 ] || exit

	IN_EXEC_CA="$1" && shift

	# Finish argument parsing
	trap - EXIT

	# Usage: _this ...
	_this()
	{
		[ -z "${this-}" ] || return 0

		if [ ! -e "$0" -o "$0" -ef "/proc/$$/exe" ]; then
			# Executed script is
			#  a) read from stdin through pipe
			#  b) specified via -c option
			#  d) sourced
			printf >&2 -- '%s: not executed, exiting.\n' "$0"
			return 123
		else
			# Executed script exists and it's inode differs
			# from process exe symlink (Linux specific)
			this="$0"
			this_dir="${this%/*}/"
		fi
		this_dir="$(cd "$this_dir" && echo "$PWD")" || return
	}
	_this "$@" || exit

	# Try to determine EASY_RSA
	if [ -z "${EASY_RSA-}" ] && EASY_RSA="$this_dir" &&
	   [ ! -f "$EASY_RSA/easy-rsa-lib.sh" ]
	then
		printf >&2 -- '%s: cannot find easy-rsa location\n' "$this"
		exit 1
	fi

	# Source functions library
	KEY_DIR='dummy' . "$EASY_RSA/easy-rsa-lib.sh"

	# Print version if requested
	if [ -n "${version+x}" ]; then
		echo "(easy-rsa) $prog_name $prog_version"
		exit 0
	fi

	# Re-exec itself with clean environment
	eval env_exec ${runas:+--runas '$runas'} \
		"IN_EXEC_CA='$IN_EXEC_CA'" \
		"EASY_RSA='$EASY_RSA'" \
		${env_vars} \
		-- '"$0"' '"$@"'
else
	# Source functions library
	KEY_DIR='dummy' . "$EASY_RSA/easy-rsa-lib.sh"

	# Per user configuration
	export VARS_DIR=${VARS_DIR:-~/easy-rsa}
	export VARS_FILE="$VARS_DIR/vars-$IN_EXEC_CA"

	if ! . "$VARS_FILE"; then
		fatal '%s: sourcing vars file ("%s") failed\n' \
		      "$prog_name" "$VARS_FILE"
	fi

	# Usage: vars_file_access_ok
	vars_file_access_ok()
	{
		pw_valid "${CA_PASSPHRASE-}" || return 0

		local fmt='%s: vars file ("%s") has CA passphrase and is %s\n'
		local t

		# mode
		if t="$(file_rights_octal "$VARS_FILE")" &&
		   [ $((t & 077)) -ne 0 ]
		then
			fatal "$fmt" "$prog_name" "$VARS_FILE" \
				'group/world accessible'
		fi

		# owner/group
		if t="$(file_owner_octal "$VARS_FILE")" &&
		   [ "$t" != "$(id -u):$(id -g)" ]
		then
			fatal "$fmt" "$prog_name" "$VARS_FILE" \
				'not (group) owned by the current user'
		fi
	}
	vars_file_access_ok

	# Command to run with CA environment or $SHELL if no command is given
	if [ $# -eq 0 ]; then
		command="${SHELL:-/bin/sh}"
		# Standard POSIX compatible PS1
		export PS1="easy-rsa:$IN_EXEC_CA> "
	else
		command="$1"
		shift
	fi

	# Update PATH with EASY_RSA directory at the top
	PATH="$EASY_RSA:$EASY_RSA/extensions/xbin:$PATH"

	# Change working directory to $VARS_DIR
	cd "$VARS_DIR" ||:

	exec "$command" "$@"
fi
